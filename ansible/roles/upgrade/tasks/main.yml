---
- name: check if tarball already there in the machine
  command: "ls -lart"
  register: ls_output

- name: download the tarball
  get_url:
    url: "{{ cloudsight_server_install_url }}/{{ cloudsight_version }}/cloudsight-install-{{ cloudsight_version }}.tar.bz2"
    dest: /home/{{ ansible_user }}
    url_username: "{{ inteno_user }}"
    url_password: "{{ inteno_password }}"
  when: ls_output.stdout.find('{{ cloudsight_version }}') == -1

# Check if cloudsight-install-version is there. 
# If yes -> rename it to cloudsight-install-version-old
- name: Rename the cloudsight-server-install 
  ansible.builtin.copy:
    remote_src: true
    src: ~/cloudsight-server-install/
    dest: ~/cloudsight-server-install-old
  when: ls_output.stdout.find('cloudsight-server-install') != -1

# Untar the tarball file:
- name: Untar the tarball files
  command: "tar -xvf ./cloudsight-install-{{ cloudsight_version }}.tar.bz2"

# Create a new folder:
- name: create the directory to install the CS server
  file:
    path: ~/cloudsight_{{ cloudsight_version }}
    state: directory

# Run upgrade.sh script
- name: Run upgrade.sh script
  shell: ../cloudsight-server-install/upgrade.sh
  args: 
    chdir: /home/{{ ansible_user }}/cloudsight_{{ cloudsight_version }}/
  ignore_errors: yes
  become: yes

- name: Copy the key files 
  copy:  
    src: "{{ item }}"
    dest: ~/cloudsight_{{ cloudsight_version }}/
  with_fileglob:
    - ../../../../key_files/{{ domain }}/*
    - ../../../../key_files/*.truststore
  when: item.find("example.truststore") == -1

- name: get into that folder
  shell: "cd /home/{{ ansible_user }}/cloudsight_{{ cloudsight_version }}/"

# Run the deployment command: 
- name: Execute the deployment
  shell: ../cloudsight-server-install/deploy.sh {{ cloudsight_version }}
  args: 
    chdir: /home/{{ ansible_user }}/cloudsight_{{ cloudsight_version }}/
  ignore_errors: yes
  become: yes
  register: deploy_out

- debug: msg="{{ deploy_out.stdout.split('\n') }}"

# copy the log files back to the host and return the result variable
- name: Recursively find the log files
  find:
    paths: /home/{{ ansible_user }}/cloudsight_{{ cloudsight_version }}/
    file_type: file
    patterns: "*.log"
  register: files_to_fetch

- name: fetch files
  fetch:
    src: "{{ item.path }}"
    dest: ../result/
  loop: "{{ files_to_fetch.files }}"
